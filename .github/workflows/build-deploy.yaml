name: Docker CI/CD

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKERHUB_REPOSITORY_NAME: ic-devops-todo-api
  REGISTRY: docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY_NAME }}
          tags: |
            type=sha,prefix=,suffix=

      - name: Build and push api
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push worker
        uses: docker/build-push-action@v6
        with:
          context: ./worker
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64    

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Assume AWS IAM Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Get EC2 instance IP
        id: get-instance-ip
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:service,Values=backendismail" "Name=tag:env,Values=devismail" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)

          if [ "$INSTANCE_IP" = "None" ] || [ -z "$INSTANCE_IP" ]; then
            echo "No running EC2 instance found with tags service=backendismail and env=devismail"
            exit 1
          fi

          echo "instance-ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Found EC2 instance IP: $INSTANCE_IP"

      - name: Deploy to EC2
        run: |
          # Create SSH key file
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # Get the image tag from the build job
          IMAGE_TAG="${{ github.sha }}"
          IMAGE_NAME="${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY_NAME }}:$IMAGE_TAG"

          # Test SSH connection first
          ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ steps.get-instance-ip.outputs.instance-ip }} "echo 'SSH connection successful'"

          # SSH into EC2 and deploy
          ssh -i private_key.pem -o StrictHostKeyChecking=no -T ubuntu@${{ steps.get-instance-ip.outputs.instance-ip }} << 'EOF'
          
          
          # Go to app directory (where repo + compose.yml is cloned)
          cd ~/todo-backendICDevOps
          git fetch origin
          git reset --hard origin/main 
          
          #Login to Docker Hub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
          IMAGE_TAG=${{ github.sha }} DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }} docker compose pull api worker
          IMAGE_TAG=${{ github.sha }} DOCKERHUB_USERNAME=${{ env.DOCKERHUB_USERNAME }} docker compose up -d api worker
          
          # Clean up old images to save space
          docker image prune -f
          EOF

          # Clean up SSH key
          rm private_key.pem
